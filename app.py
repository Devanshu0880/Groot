# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1900wl-_QPzveNOcOdiQJdRnUYFF6POOq
"""

import streamlit as st
import pandas as pd
import pickle
import numpy as np

# Set page configuration
st.set_page_config(page_title="IPL Score Predictor", page_icon="üèè", layout="centered")

# Title and description
st.title("üèè IPL First Inning Score Predictor")
st.markdown("""
This app predicts the final first-inning score of an IPL match based on the current match state.
Enter the match details below and click **Predict** to get the estimated score.
""")

# Load the trained model and preprocessor
try:
    with open('ml_model.pkl', 'rb') as f:
        model = pickle.load(f)
    with open('preprocessor.pkl', 'rb') as f:
        preprocessor = pickle.load(f)
except FileNotFoundError:
    st.error("Model or preprocessor file not found. Please ensure 'ml_model.pkl' and 'preprocessor.pkl' are in the same directory.")
    st.stop()

# Define valid teams
valid_teams = [
    'Chennai Super Kings', 'Delhi Daredevils', 'Kings XI Punjab', 'Kolkata Knight Riders',
    'Mumbai Indians', 'Rajasthan Royals', 'Royal Challengers Bangalore', 'Sunrisers Hyderabad'
]

# Prediction function
def score_predict(batting_team, bowling_team, runs, wickets, overs, runs_last_5, wickets_last_5, model=model, preprocessor=preprocessor):
    try:
        # Input validation
        if batting_team not in valid_teams or bowling_team not in valid_teams:
            raise ValueError("Invalid team name. Please select from the provided options.")
        if any(x < 0 for x in [runs, wickets, overs, runs_last_5, wickets_last_5]):
            raise ValueError("Input values cannot be negative.")
        if overs > 20 or wickets > 10:
            raise ValueError("Overs cannot exceed 20, and wickets cannot exceed 10.")
        if overs < 5:
            raise ValueError("Overs must be at least 5 for a valid prediction.")

        # Create input DataFrame
        input_data = pd.DataFrame({
            'bat_team': [batting_team],
            'bowl_team': [bowling_team],
            'runs': [runs],
            'wickets': [wickets],
            'overs': [overs],
            'runs_last_5': [runs_last_5],
            'wickets_last_5': [wickets_last_5]
        })

        # Transform input using preprocessor and predict
        transformed_data = preprocessor.transform(input_data)
        pred = model.predict(transformed_data)
        return int(round(pred[0]))
    except Exception as e:
        st.error(f"Error in prediction: {str(e)}")
        return None

# Input form
with st.form(key="prediction_form"):
    st.subheader("Enter Match Details")

    col1, col2 = st.columns(2)

    with col1:
        batting_team = st.selectbox("Batting Team", options=valid_teams)
        runs = st.number_input("Current Runs", min_value=0, value=0, step=1)
        overs = st.number_input("Overs Bowled", min_value=5.0, max_value=20.0, value=5.0, step=0.1)
        runs_last_5 = st.number_input("Runs in Last 5 Overs", min_value=0, value=0, step=1)

    with col2:
        bowling_team = st.selectbox("Bowling Team", options=valid_teams)
        wickets = st.number_input("Wickets Lost", min_value=0, max_value=10, value=0, step=1)
        wickets_last_5 = st.number_input("Wickets in Last 5 Overs", min_value=0, max_value=10, value=0, step=1)

    submit_button = st.form_submit_button(label="Predict Score")

# Prediction logic
if submit_button:
    if batting_team == bowling_team:
        st.error("Batting and bowling teams cannot be the same.")
    else:
        predicted_score = score_predict(
            batting_team, bowling_team, runs, wickets, overs, runs_last_5, wickets_last_5
        )
        if predicted_score is not None:
            st.success(f"**Predicted Final Score**: {predicted_score}")
            st.balloons()

# Footer
st.markdown("""
---
*Built with ‚ù§Ô∏è using Streamlit*
*Model trained on IPL match data using Random Forest Regressor*
""")